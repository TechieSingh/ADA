#include<stdio.h>
#include<time.h>
#include<sys/time.h>
#include <stdlib.h>
#include <stdbool.h>
int a[100000];
void fnGeneratrNumbers(int n)
{int i;
 srand(time(NULL));
 for(i=0; i<n; i++)
 a[i]=rand()%100000;
}
void heapify(int l, int r){
 int i;
 for(i=r/2;i>=1;i--){
 int k=i;
 int v=a[k];
 bool heap=false;
 while( !heap && 2*k<=r ){
 int j=2*k;
 if(j<r)
 if (a[j]<a[j+1]) j++;
 if(v>=a[j]) heap=true;
 else{
 a[k]=a[j];
 k=j;
 }
 }
 a[k]=v;
 }
}
void heapSort(int l, int r)
{
 while(r>=1){
 int temp=a[r];
 a[r]=a[l];
 a[l]=temp;
 r--;
 heapify(l, r);
 }
}
long int getTime(){
 struct timeval tp;
 gettimeofday(&tp, NULL);
 return tp.tv_sec*1000 + tp.tv_usec/1000;
}
FILE *fp;
int main()
{
 fp = fopen("S:\\clion\\untitled\\graph.txt", "w");
 int n=10000,val;
 for( val=1; val<11; val++)
 {
 fnGeneratrNumbers(n*val);
 long int before= getTime();
 heapify(1, n*val-1);
 heapSort(1,n*val-1);
 long int after= getTime();
 printf("n=%d \ttime taken = %ld milli seconds\n", val*n, (after-before) );
 fprintf(fp, "%d\t%ld\n", val*n, (after-before) );
 }
 fclose(fp);
}
