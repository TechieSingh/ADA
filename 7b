#include<stdio.h>
#include<stdlib.h>
struct Node
{
 int key, height;
 struct Node *left, *right;
};
int max(int a, int b)
{
 return (a > b)? a : b;
}
int height(struct Node *N)
{
 if (N == NULL) return 0;
 return N->height;
}
struct Node* newNode(int key)
{
 struct Node* node = (struct Node*)
 malloc(sizeof(struct Node));
 node->key = key;
 node->left = node->right = NULL;
 node->height = 1;
 return(node);
}
struct Node *rightRotate(struct Node *y)
{
 struct Node *x = y->left;
 struct Node *T2 = x->right;
 x->right = y;
 y->left = T2;
 y->height = max(height(y->left), height(y->right))+1;
 x->height = max(height(x->left), height(x->right))+1;
 return x;
}
struct Node *leftRotate(struct Node *x)
{
 struct Node *y = x->right;
 struct Node *T2 = y->left;
 y->left = x;
 x->right = T2;
 x->height = max(height(x->left), height(x->right))+1;
 y->height = max(height(y->left), height(y->right))+1;
 return y;
}
int getBalance(struct Node *N)
{
 if (N == NULL) return 0;
 return height(N->left) - height(N->right);
}
int checkRotate(int balance, int key, struct Node *node) {
 if(balance >1 )
 if(key < node->left->key) return 1;
 else if(key > node->left->key) return 2;
 else if (balance<-1)
 if(key<node->right->key) return 3;
 else if(key>node->right->key) return 4;
 return 5;
}
struct Node* insert(struct Node* node, int key)
{
 if (node == NULL) return(newNode(key));
 if (key < node->key)
 node->left = insert(node->left, key);
 else if (key > node->key)
 node->right = insert(node->right, key);
 else
 return node;
 node->height = 1 + max(height(node->left), height(node->right));
 switch(checkRotate(getBalance(node), key, node)){
 case 1: return rightRotate(node);
 case 2: node->left = leftRotate(node->left);
 return rightRotate(node);
 case 3: return leftRotate(node);
 case 4: node->right = rightRotate(node->right);
 return leftRotate(node);
 default:break;
 }
 return node;
}
void inOrder(struct Node *root)
{
 if(root != NULL)
 {
 inOrder(root->left);
 printf("%d(%d) ", root->key,height(root->left)-height(root->right));
 inOrder(root->right);
 }
}
int main()
{
 struct Node *root = NULL;
 int n, i, ele;
 printf("enter the number of elements:",&n);
 scanf("%d",&n);
 printf("\nEnter Elements:\n");
 for(i=0;i<n;i++)
 {
 scanf("%d",&ele);
 root = insert(root, ele);
 }
 printf("inorder traversal of the constructed AVL tree is \n");
 inOrder(root);
 return 0;
}
