#include <stdio.h>
int cost[100][100], n, src, visited[100], pred[100], dist[100];
int findMinInSrcRowForNonVisitedVertex() {
 int minInd = 0, i, minDist=9999;
 for(i=0;i<n;i++)
 if(dist[i]<minDist && !visited[i])
 {
 minDist=dist[i];
 minInd=i;
 }
 return minInd;
}
void updateDistMatrixToVisitedNodeIfDistIsMinimum(int minInd) {
 int i;
 for(i=1;i<n;i++)
 if(visited[i]==0&&cost[i][minInd]<dist[i])
 {
 dist[i]=cost[i][minInd];
 pred[i]=minInd;
 }
}
int prims() {
 int i, minCost=0, noOfEdges= n-1;
 dist[0]=0; visited[0]=1;
 for(i=1;i<n;i++) {
 dist[i]=cost[0][i];
 pred[i]=0;
 visited[i]=0;
 }
 while(noOfEdges>0){
 int minInd = findMinInSrcRowForNonVisitedVertex();
 printf("edge %d -> %d \n", minInd, pred[minInd]);
 noOfEdges--;
 visited[minInd]=1;
 updateDistMatrixToVisitedNodeIfDistIsMinimum(minInd);
 minCost += cost[minInd][pred[minInd]];
 }
 return minCost;
}
int main() {
 int i, j;
 printf("Enter the number of vertices:");
 scanf("%d", &n);
 printf("Enter the cost matrix:");
 for(i=0;i<n;i++)
 for(j=0;j<n;j++)
 scanf("%d",&cost[i][j]);
 printf("enter the sourcevertex:");
 scanf("%d", &src);
 printf("\nminimum cost is %d",prims());
}
